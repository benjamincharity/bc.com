---
export const prerender = true;

import BaseLayout from '~/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { processMarkdown } from '~/utils/markdown-processor';
import NewsletterForm from '~/components/islands/NewsletterForm';
import BrowseByTags from '~/components/islands/BrowseByTags';
import { siteMetadata } from '~/data/siteMetadata';
import type { GetStaticPaths } from 'astro';
import { BackToLink } from '~/components/BackToLink';
import { detectArticleSeries, getSeriesArticles, generateSeriesSchema } from '~/utils/article-series';
import { generateArticleKeywords } from '~/utils/keyword-generator';
import { generateFAQSchema } from '~/utils/faq-schema';
import RelatedArticles from '~/components/RelatedArticles.astro';

export const getStaticPaths = (async () => {
  const articles = await getCollection('blog');

  // Filter drafts based on environment
  // In development: show all articles including drafts
  // In production: hide draft articles
  const publishedArticles = articles.filter(article =>
    import.meta.env.DEV || !article.data.draft
  );

  return publishedArticles.map((article) => ({
    params: { slug: article.id },
    props: { article },
  }));
}) satisfies GetStaticPaths;

const { article } = Astro.props;
const body = article.body || '';

// Process markdown with our custom processor that includes Cloudinary transformation
const htmlContent = await processMarkdown(body);

// Get all articles to calculate tag counts
const allArticles = await getCollection('blog');
const publishedArticles = allArticles.filter(a => !a.data.draft);

// Calculate tag counts
const tagCounts = new Map<string, number>();
publishedArticles.forEach(a => {
  const tags = a.data.tags || [];
  tags.forEach(tag => {
    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
  });
});

// Filter to only show tags from this article
const articleTags = article.data.tags || [];
const tagsWithCounts = articleTags
  .map(tag => [tag, tagCounts.get(tag) || 0] as [string, number])
  // eslint-disable-next-line no-unused-vars
  .filter(([_tag, count]) => count > 0);

// Construct full Cloudinary URL for article image
const articleImage = article.data.image
  ? siteMetadata.articleImagePath + article.data.image
  : siteMetadata.url + siteMetadata.image;

// Generate dynamic keywords for SEO
const articleKeywords = generateArticleKeywords(article);

// JSON-LD structured data for article
const articleUrl = `${siteMetadata.url}/articles/${article.id}`;

// Calculate word count from article body
const wordCount = body.split(/\s+/).filter(word => word.length > 0).length;

// Check if article is part of a series
const seriesKey = detectArticleSeries(article);
const seriesData = seriesKey ? getSeriesArticles(allArticles, seriesKey) : null;
const seriesSchema = seriesKey && seriesData ? generateSeriesSchema(article, seriesData, seriesKey) : null;

// Check if article has FAQ schema
const faqSchema = generateFAQSchema(article.id);

const jsonLd = {
  '@context': 'https://schema.org',
  '@graph': [
    {
      '@type': 'BlogPosting',
      headline: article.data.title,
      description: article.data.description,
      image: article.data.image ? {
        '@type': 'ImageObject',
        url: articleImage,
        width: 2560,
        height: 1440,
        caption: article.data.title,
        alternateName: article.data.title,
      } : articleImage,
      datePublished: article.data.date.toISOString(),
      dateModified: (article.data.dateModified || article.data.date).toISOString(),
      author: {
        '@type': 'Person',
        name: siteMetadata.author,
        url: siteMetadata.url,
        email: siteMetadata.email,
      },
      publisher: {
        '@type': 'Person',
        name: siteMetadata.author,
        url: siteMetadata.url,
      },
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': articleUrl,
      },
      url: articleUrl,
      keywords: article.data.tags.join(', '),
      articleSection: article.data.tags[0],
      wordCount: wordCount,
      timeRequired: `PT${article.data.readingTime || 5}M`,
      inLanguage: 'en-US',
      ...(seriesSchema || {}),
    },
    {
      '@type': 'BreadcrumbList',
      itemListElement: [
        {
          '@type': 'ListItem',
          position: 1,
          name: 'Home',
          item: siteMetadata.url,
        },
        {
          '@type': 'ListItem',
          position: 2,
          name: 'Articles',
          item: `${siteMetadata.url}/articles`,
        },
        {
          '@type': 'ListItem',
          position: 3,
          name: article.data.title,
          item: articleUrl,
        },
      ],
    },
  ],
};
---

<BaseLayout
  title={article.data.title}
  description={article.data.description || `Article: ${article.data.title}`}
  image={articleImage}
  keywords={articleKeywords}
  showBackground={false}
  ogType="article"
  articleMeta={{
    publishedTime: article.data.date.toISOString(),
    modifiedTime: (article.data.dateModified || article.data.date).toISOString(),
    author: siteMetadata.author,
    tags: article.data.tags,
  }}
>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
    {faqSchema && <script type="application/ld+json" set:html={JSON.stringify(faqSchema)} />}
  </Fragment>
  <div class="prose-wrapper">
    <main>
      <nav class="mb-6 text-center">
        <BackToLink to="/articles">
          Back to all articles
        </BackToLink>
      </nav>

      <header class="mb-4">
        <div class="flex justify-between items-start leading-tight text-gray-600 dark:text-gray-400 mb-1">
          <div class="font-mono text-[10px] italic">
            Published: {new Date(article.data.date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </div>
          {article.data.dateModified && article.data.dateModified.getTime() !== article.data.date.getTime() && (
            <div class="font-mono text-[10px] italic">
              Updated: {new Date(article.data.dateModified).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </div>
          )}
        </div>

        <h1 class="my-1 font-sourceSerif4 text-3xl font-bold leading-tight text-gray-700 dark:text-gray-300">
          {article.data.title}
        </h1>

        <p class="reading-time text-gray-600 dark:text-gray-400 text-sm mb-4">
          Reading time: {article.data.readingTime || '5'}min
        </p>
      </header>

      <article class="rendered-markdown" set:html={htmlContent}></article>

      <!-- Newsletter Signup Section -->
      <section class="max-w-screen-2xl mx-auto px-8 py-12 mt-12">
        <div class="max-w-xl mx-auto text-center">
          <h2 class="mb-1 text-2xl font-semibold font-sourceSerif4 text-gray-800 dark:text-white">
            Build, Scale, Succeed
          </h2>
          <p class="mb-6 leading-tight text-gray-600 dark:text-gray-300">
            Join others receiving expert advice on<br /> engineering and product development.
          </p>
          <NewsletterForm
            className="mx-auto"
            client:visible
          />
        </div>
      </section>

      {tagsWithCounts.length > 0 && (
        <section class="mb-8">
          <BrowseByTags
            tags={tagsWithCounts}
            heading="Tags:"
            client:idle
          />
        </section>
      )}

      <RelatedArticles 
        currentArticle={article} 
        allArticles={allArticles}
        maxResults={2}
      />

      <footer class="text-center pt-8 mt-12 border-t border-gray-200 dark:border-gray-700">
        <BackToLink to="/articles" />
      </footer>
    </main>
  </div>
</BaseLayout>