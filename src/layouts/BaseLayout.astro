---
import { ViewTransitions } from 'astro:transitions';
import '../styles/global.css';
import Header from '~/components/islands/Header';
import ColorModeToggle from '~/components/islands/ColorModeToggle';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  theme?: 'light' | 'dark' | null;
  showBackground?: boolean;
  canvasLayout?: boolean;
}

const {
  title = 'Benjamin Charity',
  description = 'Building products & Engineering teams',
  image = 'https://www.benjamincharity.com/images/og-default.png',
  theme = null,
  showBackground = true,
  canvasLayout = false,
} = Astro.props;

// Pages with canvas background get special layout treatment
const hasCanvas = showBackground && canvasLayout;

// This should match your existing siteMetadata structure
const siteMetadata = {
  title: 'Benjamin Charity',
  description: 'Building products & Engineering teams',
  keywords: ['engineering', 'products', 'leadership', 'technology'],
  siteUrl: 'https://www.benjamincharity.com',
};

const fullTitle = title === siteMetadata.title ? title : `${title} | ${siteMetadata.title}`;
---

<!DOCTYPE html>
<html lang="en" class={`h-dvh ${theme || 'dark'}`}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={siteMetadata.keywords.join(', ')} />
    <link rel="canonical" href={siteMetadata.siteUrl + Astro.url.pathname} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={siteMetadata.siteUrl + Astro.url.pathname} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={siteMetadata.siteUrl + Astro.url.pathname} />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />

    <!-- Favicons -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json" />

    <!-- RSS Feed -->
    <link rel="alternate" type="application/rss+xml" title="Benjamin Charity RSS Feed" href="/feed.xml" />

    <!-- Theme meta -->
    <meta name="color-scheme" content="dark light" />
    <meta name="theme-color" content="#2262a1" />

    <!-- Fonts - VT323 is key to your design -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=VT323&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&display=swap" rel="stylesheet" />

    <!-- Astro Tailwind CSS will be injected automatically -->

    <!-- Allow pages to inject additional head elements -->
    <slot name="head" />

    <!-- Theme handling (matching your existing theme provider) -->
    <script is:inline>
      // This matches the legacy Remix theme.provider.tsx logic
      (function() {
        function getPreferredTheme() {
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        function getTheme() {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark' || savedTheme === 'light') {
              return savedTheme;
            }
          }
          return getPreferredTheme();
        }

        const theme = getTheme();
        const cl = document.documentElement.classList;

        // Remove existing theme classes
        cl.remove('light', 'dark');

        // Apply theme
        cl.add(theme);

        // Update meta theme-color
        const meta = document.querySelector('meta[name=color-scheme]');
        if (meta) {
          if (theme === 'dark') {
            meta.content = 'dark light';
          } else {
            meta.content = 'light dark';
          }
        }
      })();
    </script>

    <ViewTransitions />
  </head>
  <body class="h-dvh transition-colors duration-100 flex flex-col" data-canvas-layout={canvasLayout ? 'true' : 'false'}>
    <Header client:load transition:persist />

    <!-- Add ColorModeToggle to all pages except those with canvas background -->
    {!hasCanvas && (
      <div style="position: relative;">
        <ColorModeToggle client:load />
      </div>
    )}

    <div class="flex-grow">
      <slot />
    </div>

    <!-- Rock Paper Scissors Console Art -->
    <script is:inline>
      // Rock Paper Scissors console game
      (function() {
        const rock = `
    _______
---'   ____)
      (_____)
      (_____)
      (____)
---.__(___)
(rock)
`;

        const paper = `
    _______
---'   ____)____
          ______)
          _______)
         _______)
---.__________)
(paper)
`;

        const scissors = `
    _______
---'   ____)____
          ______)
       __________)
      (____)
---.__(___)
(scissors)
`;

        const hands = [rock, paper, scissors];
        const result = Math.floor(Math.random() * 3);

        console.log(`
Welcome! üëãüèº

Think you can outsmart me?

${hands[result]}

Refresh to play again!
        `);
      })();
    </script>
  </body>
</html>